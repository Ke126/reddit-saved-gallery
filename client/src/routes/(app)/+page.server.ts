import { CLIENT_ID, CLIENT_SECRET } from '$env/static/private';
import type { GetPostsResponseBody, RedditPost, RedditThing } from '$lib';
import type { PageServerLoad, Actions } from './$types';
import { redirect } from '@sveltejs/kit';

export const load: PageServerLoad = async ({ locals, url }) => {
	console.log('LOAD / (page)');
	if (!locals.user) {
		console.log('Not authenticated');
		redirect(301, '/login');
	}
	const fetchurl = new URL('http://localhost:4000/posts');
	url.searchParams.forEach((value: string, key: string) => {
		console.log(key, value);
		fetchurl.searchParams.append(key, value);
	});
	console.log(fetchurl.toString());
	const response = await fetch(fetchurl, {
		headers: {
			authorization: `bearer ${locals.user.access_token}`
		}
	});
	const result = (await response.json()) as GetPostsResponseBody;
	return {
		posts: {
			total_count: result.total_count,
			count: result.count,
			page: result.page,
			posts: result.posts.map(formatter)
		}
	};
};

const FORMATS = ['png', 'jpg', 'jpeg', 'gif'].map((format) => new RegExp(`\\.${format}`, 'i'));
function isImageLink(input: string): boolean {
	return FORMATS.some((format) => format.test(input));
}

function formatter(post: RedditThing): RedditPost {
	// check based on post kind first
	if (post.kind === 't1') {
		const obj: RedditPost = {
			_id: post._id,
			favorited: post.favorited,
			subreddit: post.data.subreddit,
			title: post.data.link_title,
			selftext: post.data.body,
			permalink: post.data.permalink,
			media_url: undefined,
			author: post.data.author,
			link_author: post.data.link_author,
			num_comments: post.data.num_comments,
			score: post.data.score,
			created: post.data.created
		};
		return obj;
	}
	const obj: RedditPost = {
		_id: post._id,
		favorited: post.favorited,
		subreddit: post.data.subreddit,
		title: post.data.title,
		selftext: post.data.selftext,
		permalink: post.data.permalink,
		media_url: undefined,
		author: post.data.author,
		link_author: undefined,
		num_comments: post.data.num_comments,
		score: post.data.score,
		created: post.data.created
	};
	// links only
	// url is already an image
	if (post.data.domain === 'i.redd.it' || isImageLink(post.data.url)) {
		obj.media_url = post.data.url;
		return obj;
	}
	// check for an existing preview generated by reddit
	if (post.data.preview && post.data.preview.images.length > 0) {
		obj.media_url = post.data.preview.images[0].source.url;
		return obj;
	}
	// try media_metadata
	if (post.data.media_metadata) {
		if (post.data.gallery_data && post.data.gallery_data.items.length > 0) {
			const firstPage = post.data.gallery_data.items[0].media_id;
			obj.media_url = post.data.media_metadata[firstPage].s.u;
		} else {
			const firstPage = Object.keys(post.data.media_metadata)[0];
			obj.media_url = post.data.media_metadata[firstPage].s.u;
		}
		return obj;
	}
	// use low-res thumbnail
	if (isImageLink(post.data.thumbnail)) {
		obj.media_url = post.data.thumbnail;
		return obj;
	}
	return obj;
}

export const actions = {
	pull: async ({ locals }) => {
		console.log('Pull action');
		if (!locals.user) {
			console.log('Not authenticated');
			redirect(301, '/login');
		}
		const response = await fetch('http://localhost:4000/posts', {
			method: 'POST',
			body: JSON.stringify({
				username: locals.user?.username
			}),
			headers: {
				'Content-Type': 'application/json',
				authorization: `bearer ${locals.user?.access_token}`
			}
		});
		console.log(response.status);
		console.log('Form done');
		redirect(301, '/');
	},
	favorite: async ({ locals, request }) => {
		console.log('Favorite action');
		if (!locals.user) {
			console.log('Not authenticated');
			redirect(301, '/login');
		}
		const form = await request.formData();
		await fetch(`http://localhost:4000/posts/${form.get('_id')}`, {
			method: 'PATCH',
			headers: {
				authorization: `bearer ${locals.user?.access_token}`,
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				favorited: form.get('favorited') === 'on'
			})
		});
	},
	logout: async ({ locals, cookies }) => {
		console.log('Logout action');
		const response = await fetch('https://www.reddit.com/api/v1/revoke_token', {
			method: 'POST',
			body: `token=${locals.user?.refresh_token}&token_type_hint=refresh_token`,
			headers: {
				Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`,
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		});
		// const json = await response.json();
		console.log(response.status);
		cookies.delete('jwt', { path: '/' });
		redirect(301, '/login');
	}
} satisfies Actions;
